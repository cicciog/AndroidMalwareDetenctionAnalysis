package AndroidMalwareAnalysis;

import APK.ApkManager;
import CFG.DroidNative;
import Deassembler.Deassembler;
import FileManager.FileManager;
import FileManager.Path;
import MW.MultiThreadMW;

import java.io.File;

public class MW_MAILGenerator {
    /**
     * Args:
     * 1) Path of mw family folder
     */
    public static void main (String [] args) throws Exception {
        if (args.length != 2 || !checkArgsValidity(args)) {
            System.out.println("Error:MAILGenerator:main: Wrong parameters");
            System.out.println("Usage for running MW_MAILGenerator: java -jar MW_MAILGenerator.jar <max_number_of_thread> <mw_family_folder>");
            System.exit(0);
        }

        System.out.println("Malware MAIL Generator Program\n");



        //Variables
        int numberOfThread = Integer.valueOf(args[0]);
        File mwFolder = new File(args[1]);

        ApkManager apkManager = new ApkManager();
        Deassembler deassembler = new Deassembler();
        DroidNative droidNative = new DroidNative();

        //Create default directories
        initDir();


        //Download tools
        apkManager.downloadApkTool();
        deassembler.downloadDeassemblerTools();


        //Download and build DroidNative
        File droidnativeFolder = new File(Path.getDroidNativeFolderPath());
        if (!droidnativeFolder.exists()) {
            droidNative.downloadDroidNativeCode();

            //Build DroidNative
            System.out.println("Run DroidNative Build Script\n");
            droidNative.build();
            droidNative.folderNormalization();
            System.out.println("\nDroidNative builded successfully\n");
        }

        System.out.println();

        System.out.println("Start MultiThreading MW Analysis\n");
        MultiThreadMW multiThreadMW = new MultiThreadMW(numberOfThread);
        multiThreadMW.startMultiThreadMW(mwFolder.getAbsolutePath());
    }

    private static boolean checkArgsValidity (String [] args) {
        try {
            int numberOfThread = Integer.valueOf(args[0]);
        } catch (NumberFormatException e) {
            return false;
        }

        File mwFolder = new File(args[1]);

        //Invalid MW
        if (!mwFolder.exists() || !mwFolder.isDirectory())
            return false;

        return true;
    }

    private static void initDir () {
        FileManager fileManager = new FileManager();
        fileManager.createDirectory(Path.getResourcePath());
        fileManager.createDirectory(Path.getToolFolderPath());
        fileManager.createDirectory(new Path().getApkFolderPath());
    }
}
