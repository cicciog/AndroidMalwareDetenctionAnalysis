package AndroidMalwareAnalysis;

import FileManager.FileManager;
import org.apache.commons.io.FileUtils;

import java.io.*;
import java.nio.file.Files;

public class AndroidMalwareAnalysis {

    public static void main (String [] args) throws IOException {
        //Url
        String urlApkTool = "https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.3.3.jar";
        String urlBinUtilitiesWithObjDump = "https://datapacket.dl.sourceforge.net/project/mingw/MinGW/Base/binutils/" +
                "binutils-2.28/binutils-2.28-1-mingw32-bin.tar.xz";
        String urlTelegramApk = "https://dw.uptodown.com/dwn/w76tVn7onjw1uZFTLSx7oHocBkAosv9ayQa9grj9ISV4gHt8pdhFJMLsWi4mlgfzs_yhG0GtxMNw5bJexOvwCbwdjC07HiNFirkxw23bi9K7mG8_A4DkPjYX29tJdr6B/xU3Mrpe0fg7ZAXfHB-tXqYPrJ-SrBCLVAsT0A2XtTPsysx7h-xsPK4fbeO5nRRYnI2JKN5nbD7mngjaVx8f73D1HgJQ5FVG-xNwGBunDqweLbEa-flWijLYVitw07hMd/Hy1BGM9C5FUM7PoUwtlBumS4C62Kx2FNYnc4uz4e6LW4z88CsYMJb30u6jub5MfX9EM0hw1J2JsnYFbxE17_UerP2pOA85WLRjW82geS_cCIvBgrxNAgxmmMe8UDJMfL/bINq418Z02w-M4vZBh4owKeq6SkGOyQsC68puHjYdbM=/";

        // Path
        String pathProject = System.getProperty("user.dir");
        String resourceDirectory = pathProject + "\\src\\main\\resources\\";

        String toolsDirectory = resourceDirectory + "tools";
        String apkDirectory = resourceDirectory + "apk";
        String apkREDirectory = resourceDirectory + "apkRE";
        String apkToolDirectory = toolsDirectory + "\\apktool.jar";
        String objDumpPath = toolsDirectory + "\\objdump.exe";


        Process process = null;
        ProcessBuilder processBuilder = new ProcessBuilder();

        String apk = null;
        String apkWithoutExt = null;
        String input = null;
        boolean apkToolsDownloadResult = false;
        boolean binUtilitiesDownloadResult = false;

        FileManager fileManager = new FileManager();
        BufferedReader console = new BufferedReader(new InputStreamReader(System.in));

        // #######################################################

        //If necessary, create work's directory
        fileManager.createDirectory(toolsDirectory);
        fileManager.createDirectory(apkDirectory);
        fileManager.createDirectory(apkREDirectory);

        // #######################################################

        //Download tools
        do {
            //Download apktool
            File apkTool = new File(apkToolDirectory);
            if (!apkTool.exists()) {
                System.out.println("ApkTool download");
                apkToolsDownloadResult = fileManager.downloadFile(urlApkTool, apkToolDirectory);
            } else {
                apkToolsDownloadResult = true;
                System.out.println("ApkTool already downloaded");
            }

            //Download objdump
            File objDump = new File(objDumpPath);
            if (!objDump.exists()) {
                System.out.println("ObjDump download");
                binUtilitiesDownloadResult = fileManager.downloadFile(urlBinUtilitiesWithObjDump, toolsDirectory + "\\binUtilities.tar.xz");

                //Take objdump from tar file
                fileManager.decompress(toolsDirectory + "\\binUtilities.tar.xz", toolsDirectory + "\\binUtilities");
                fileManager.deleteFile(toolsDirectory + "\\binUtilities.tar.xz");
                FileUtils.copyFile(new File(toolsDirectory + "\\binUtilities\\bin\\objdump.exe"), new File(toolsDirectory + "\\objdump.exe"));
                fileManager.deleteFolder(new File(toolsDirectory + "\\binUtilities"));

            } else {
                binUtilitiesDownloadResult = true;
                System.out.println("ObjDump already downloaded");
            }

            //If one of them is not yet downloaded, restart the download
            if (!(apkToolsDownloadResult && binUtilitiesDownloadResult)) {
                System.out.println("Download failed: do you want to retrieve it? (Y/N)");
                System.out.print("Answer: ");
                input = console.readLine().toUpperCase();
                System.out.print("\n");

                if (!input.equals("Y")) {
                    System.exit(0);
                }
            }
        } while (!(apkToolsDownloadResult && binUtilitiesDownloadResult));

        System.out.println();

        // #######################################################

        //Retrieve apk list to analyze
        File apkFile = new File(apkDirectory);
        File [] apkList = apkFile.listFiles();

        System.out.println("Choose APK to analize:\n");

        for (int i = 0; i < apkList.length; i++) {
            System.out.println((i+1) + ") " + apkList[i].getName());
        }

        //If there is no file, downloads a trial apk (Telegram)
        if (apkList.length == 0) {
            System.out.println("\nThere are no apk to analyse. Download a trial apk (Telegram)\n");
            fileManager.downloadFile(urlTelegramApk, apkDirectory + "\\" + "Telegram.apk");

            apkFile = new File(apkDirectory);
            apkList = apkFile.listFiles();

            System.out.println("1) Telegram.apk");
        }

        System.out.println("0) Exit\n");

        System.out.print("APK to analyze: ");
        int chose = Integer.valueOf(console.readLine()) - 1;
        System.out.print("\n");

        if(chose == -1){
            System.exit(0);
        }
        
        //Get name of apk
        apk = apkList[chose].getName();
        int pos = apk.lastIndexOf(".");
        if(pos > 0)
        {
            apkWithoutExt = apk.substring(0, pos);
            
        } else {
            apkWithoutExt = apk;
        }

        // #######################################################

        //Decompiles apk
        File apkREFile = new File(apkREDirectory + "\\" + apkWithoutExt);

        //If apk folder exists, the apk has already been decompiled
        if (!apkREFile.exists()) {

            //Decompiling choosed apk
            System.out.println("Apk decoding...");
            try {
                //Use apktool by command line to decompile apk
                String command = "java -jar " + apkToolDirectory + " d " + apkDirectory + "\\" + apk +
                        " -o " + apkREDirectory + "\\" + apkWithoutExt;

                process = Runtime.getRuntime().exec(command);
                process.waitFor();
                process.destroy();

            } catch (IOException | InterruptedException e) {
                System.out.println("Error: apk decoding failed");
                System.exit(0);
            }

            System.out.println("Operation successfully");
            System.out.println();


            //Delete all files and folder except directory with .so files
            System.out.println("Checking files and directories...");
            System.out.println();

            for (int i = 0; i < apkREFile.listFiles().length; i++) {
                File folder = apkREFile.listFiles()[i];

                System.out.println("File or directory found: " + folder.getName());

                if (!folder.getName().equals("AndroidManifest.xml") && !folder.getName().equals("lib") &&
                        !folder.getName().contains("smali")){
                    fileManager.deleteFolder(apkREFile.listFiles()[i]);
                    i--;
                    System.out.println("Deleted!");
                } else {
                    System.out.println("Ignored!");
                }

                System.out.println();
            }
        } else {
            System.out.println("Apk already decoded!");
        }

        // #######################################################

        //Decompile .so files
        String libPath = apkREDirectory + "\\" + apkWithoutExt + "\\lib";
        File apkLibDirectory = new File(libPath);

        if (!apkLibDirectory.exists()) {
            System.out.println("Lib Folder doesn't exist. Impossible to continue with decompiling");
        } else {
            System.out.println("Decompile .so file\n");

            try {
                for (File libSubFolder : apkLibDirectory.listFiles()) {
                    for (File file : libSubFolder.listFiles()) {
                        //Decompile every .so file in the folder
                        if (file.getName().endsWith(".so")) {
                            String outputDecompiledFile = file.getAbsolutePath().concat(".decompiled.txt");

                            processBuilder.command(objDumpPath, "-d", file.getAbsolutePath());
                            processBuilder.directory(new File(libSubFolder.getAbsolutePath()));
                            processBuilder.redirectOutput(new File(outputDecompiledFile));

                            process = processBuilder.start();
                            process.waitFor();

                            String errorStream = fileManager.getStream(process.getErrorStream());

                            //If there is an error, delete the file that has been created
                            if (!errorStream.equals("")) {
                                File fileToDelete = new File(outputDecompiledFile);
                                fileToDelete.delete();
                            } else {
                                System.out.println("File " + file.getName() + " decompiled successfully!!!");
                            }

                            process.destroy();
                        }
                    }
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

    }
}
