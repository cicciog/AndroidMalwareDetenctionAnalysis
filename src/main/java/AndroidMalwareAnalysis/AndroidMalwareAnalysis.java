package AndroidMalwareAnalysis;

import FileManager.FileManager;
import org.apache.commons.io.FileUtils;

import java.io.*;
import java.net.URISyntaxException;

public class AndroidMalwareAnalysis {

    public static void main (String [] args) throws IOException, URISyntaxException {
        //Variable
        FileManager fileManager = new FileManager();
        BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
        boolean numberFormatException  = false;
        int choice = 0;

        //Url
        String urlApkTool = "https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.3.3.jar";
        String urlBinUtilitiesWithObjDump = "https://datapacket.dl.sourceforge.net/project/mingw/MinGW/Base/binutils/" +
                "binutils-2.28/binutils-2.28-1-mingw32-bin.tar.xz";

        // Path
        String pathProject = fileManager.getPathJar();
        System.out.println(pathProject);
        String resourceDirectory = pathProject + "\\AMDResource\\";

        String toolsDirectory = resourceDirectory + "tools";
        String apkDirectory = resourceDirectory + "apk";
        String apkREDirectory = resourceDirectory + "apkRE";
        String apkToolDirectory = toolsDirectory + "\\apktool.jar";
        String objDumpPath = toolsDirectory + "\\objdump.exe";


        Process process = null;
        ProcessBuilder processBuilder = new ProcessBuilder();

        String apk = null;
        String apkWithoutExt = null;
        String input = null;
        boolean apkToolsDownloadResult = false;
        boolean binUtilitiesDownloadResult = false;


        // #######################################################

        //If necessary, create work's directory

        fileManager.createDirectory(resourceDirectory);
        fileManager.createDirectory(toolsDirectory);
        fileManager.createDirectory(apkDirectory);
        fileManager.createDirectory(apkREDirectory);

        // #######################################################

        //Download tools
        do {
            //Download apktool
            File apkTool = new File(apkToolDirectory);
            if (!apkTool.exists()) {
                System.out.println("ApkTool download");
                apkToolsDownloadResult = fileManager.downloadFile(urlApkTool, apkToolDirectory);
            } else {
                apkToolsDownloadResult = true;
                System.out.println("ApkTool already downloaded");
            }

            //Download objdump
            File objDump = new File(objDumpPath);
            if (!objDump.exists()) {
                System.out.println("ObjDump download");
                binUtilitiesDownloadResult = fileManager.downloadFile(urlBinUtilitiesWithObjDump, toolsDirectory + "\\binUtilities.tar.xz");

                if (binUtilitiesDownloadResult) {
                    //Take objdump from tar file
                    fileManager.decompress(toolsDirectory + "\\binUtilities.tar.xz", toolsDirectory + "\\binUtilities");
                    fileManager.deleteFile(toolsDirectory + "\\binUtilities.tar.xz");
                    FileUtils.copyFile(new File(toolsDirectory + "\\binUtilities\\bin\\objdump.exe"), new File(toolsDirectory + "\\objdump.exe"));
                    fileManager.deleteFolder(new File(toolsDirectory + "\\binUtilities"));
                }

            } else {
                binUtilitiesDownloadResult = true;
                System.out.println("ObjDump already downloaded");
            }

            //If one of them is not yet downloaded, restart the download
            if (!(apkToolsDownloadResult && binUtilitiesDownloadResult)) {
                System.out.println("Download failed: The connection can not be established.");
                System.out.println("Do you want to retrieve it? (Y/N)");
                System.out.print("Answer: ");
                input = console.readLine().toUpperCase();
                System.out.print("\n");

                if (!input.equals("Y")) {
                    System.exit(0);
                }
            }
        } while (!(apkToolsDownloadResult && binUtilitiesDownloadResult));

        System.out.println();

        // #######################################################

        //Men√π
        //Retrieve apk list to analyze
        File apkFile = new File(apkDirectory);
        File [] apkList = apkFile.listFiles();

        System.out.println("Choose APK to analize:\n");

        for (int i = 0; i < apkList.length; i++) {
            System.out.println((i+1) + ") " + apkList[i].getName());
        }

        //If there is no file
        if (apkList.length == 0) {
            System.out.println("There are no apk to analyse\n");

            boolean validPath = true;

            do {
                validPath = true;

                //Insert an apk
                System.out.println("1) Insert an apk path");

                System.out.println("0) Exit\n");

                //Control of input
                do {
                    numberFormatException = false;

                    System.out.print("Choice: ");
                    try {
                        choice = Integer.valueOf(console.readLine());
                    } catch (NumberFormatException e) {
                        numberFormatException = true;
                    }

                    System.out.print("\n");

                    if (choice > 1 || numberFormatException) {
                        System.out.println("Insert a valid choice!!!\n");
                    }
                } while (choice > 1 || numberFormatException);


                if (choice == 1) {
                    System.out.println("Insert an apk path: ");
                    String apkPath = console.readLine();
                    System.out.print("\n");

                    if (!fileManager.fileExist(apkPath)) {
                        System.out.println("Path non valido!\n");
                        validPath = false;
                    } else {
                        apkDirectory = apkPath.substring(0, apkPath.lastIndexOf("\\"));
                        apk = apkPath.substring(apkPath.lastIndexOf("\\") + 1, apkPath.length());
                        apkWithoutExt = apk.substring(0, apk.lastIndexOf("."));
                    }
                } else {
                    System.exit(0);
                }
            } while (!validPath);

        } else {
            System.out.println("0) Exit\n");

            //Control of input
            do {
                numberFormatException = false;

                System.out.print("APK to analyze: ");
                try {
                    choice = Integer.valueOf(console.readLine());
                } catch (NumberFormatException e) {
                    numberFormatException = true;
                }
                System.out.print("\n");

                if (choice > apkList.length || numberFormatException) {
                    System.out.println("Insert a valid choice!!!\n");
                }
            } while (choice > apkList.length || numberFormatException);

            if(choice == 0){
                System.exit(0);
            }


            //Get name of apk
            apk = apkList[choice-1].getName();
            int pos = apk.lastIndexOf(".");
            if(pos > 0)
            {
                apkWithoutExt = apk.substring(0, pos);

            } else {
                apkWithoutExt = apk;
            }
        }


        // #######################################################

        //Decompiles apk
        File apkREFile = new File(apkREDirectory + "\\" + apkWithoutExt);

        //If apk folder exists, the apk has already been decompiled
        if (!apkREFile.exists()) {

            //Decompiling choosed apk
            System.out.println("Apk decoding...");
            try {
                //Use apktool by command line to decompile apk
                String command = "java -jar " + apkToolDirectory + " d " + apkDirectory + "\\" + apk +
                        " -o " + apkREDirectory + "\\" + apkWithoutExt;

                process = Runtime.getRuntime().exec(command);
                process.waitFor();
                process.destroy();

            } catch (IOException | InterruptedException e) {
                System.out.println("Error: apk decoding failed");
                System.exit(0);
            }

            System.out.println("Operation successfully");
            System.out.println();


            //Delete all files and folder except directory with .so files
            System.out.println("Checking files and directories...");
            System.out.println();

            for (int i = 0; i < apkREFile.listFiles().length; i++) {
                File folder = apkREFile.listFiles()[i];

                System.out.println("File or directory found: " + folder.getName());

                if (!folder.getName().equals("AndroidManifest.xml") && !folder.getName().equals("lib") &&
                        !folder.getName().contains("smali")){
                    fileManager.deleteFolder(apkREFile.listFiles()[i]);
                    i--;
                    System.out.println("Deleted!");
                } else {
                    System.out.println("Ignored!");
                }

                System.out.println();
            }
        } else {
            System.out.println("Apk already decoded!");
        }

        // #######################################################

        //Decompile .so files
        String libPath = apkREDirectory + "\\" + apkWithoutExt + "\\lib";
        File apkLibDirectory = new File(libPath);

        if (!apkLibDirectory.exists()) {
            System.out.println("Lib Folder doesn't exist. Impossible to continue with decompiling");
        } else {
            System.out.println("Decompile .so file\n");

            try {
                for (File libSubFolder : apkLibDirectory.listFiles()) {
                    for (File file : libSubFolder.listFiles()) {
                        //Decompile every .so file in the folder
                        if (file.getName().endsWith(".so")) {
                            String outputDecompiledFile = file.getAbsolutePath().concat(".decompiled.txt");

                            processBuilder.command(objDumpPath, "-d", file.getAbsolutePath());
                            processBuilder.directory(new File(libSubFolder.getAbsolutePath()));
                            processBuilder.redirectOutput(new File(outputDecompiledFile));

                            process = processBuilder.start();
                            process.waitFor();

                            String errorStream = fileManager.getStream(process.getErrorStream());

                            //If there is an error, delete the file that has been created
                            if (!errorStream.equals("")) {
                                File fileToDelete = new File(outputDecompiledFile);
                                fileToDelete.delete();
                            } else {
                                System.out.println("File " + file.getName() + " decompiled successfully!!!");
                            }

                            process.destroy();
                        }
                    }
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

    }
}
