package AndroidMalwareAnalysis;

import APK.ApkManager;
import Deassembler.Deassembler;
import FileManager.FileManager;
import FileManager.Path;
import MW.MultiThreadMW;
import org.apache.commons.io.FileUtils;

import java.io.*;

public class AndroidMalwareAnalysis {
    private static FileManager fileManager = new FileManager();

    public static void main (String [] args) throws IOException, InterruptedException {
        //Variable
        BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
        boolean numberFormatException  = false;
        int choice = 0;

        ApkManager apkManager = new ApkManager();
        Deassembler deassembler = new Deassembler();

        String apk = null;
        String input = null;


        // #######################################################  CREATE DIRECTORIES

        //If necessary, create work's directory
        createDirectories();

        // #######################################################  DOWNLOAD TOOLS

        boolean downloadResults = false;
        do {
            downloadResults = downloadTools();

            //If one of them is not yet downloaded, restart the download
            if (!downloadResults) {
                System.out.println("Download failed: The connection can not be established.");
                System.out.println("Do you want to retrieve it? (Y/N)");
                System.out.print("Answer: ");
                input = console.readLine().toUpperCase();
                System.out.print("\n");

                if (!input.equals("Y")) {
                    System.exit(0);
                }
            }
        } while (!downloadResults);

        System.out.println();

        // #######################################################  MENÃ™

        System.out.println("Menu'");
        System.out.println("1) Deassembly Malware .so files");
        System.out.println("2) Extract .so files from apk");
        System.out.println("3) Exit\n");

        System.out.print("Insert choice: ");

        do {
            choice = Integer.valueOf(console.readLine());
            System.out.println();

            switch (choice) {
                case 1:     // Get .so from all malware
                    System.out.print("Insert path of malware folder: ");
                    String malwaresFolderPath = console.readLine();

                    File malwaresDIR = new File(malwaresFolderPath);

                    //Valid Path
                    if (malwaresDIR.exists() && malwaresDIR.isDirectory()) {

                        //Extract and deassembly so files from all malware files with a multithreading approach
                        MultiThreadMW multiThreadMW = new MultiThreadMW();
                        multiThreadMW.startMultiThreadMW(malwaresFolderPath);

                    } else {
                        System.out.println("Wrong path!!!");
                    }

                    break;
                case 2:
                    System.out.print("Insert path of apk file: ");
                    String apkPath = console.readLine();

                    File apkFile = new File(apkPath);

                    //Valid Path
                    if (apkFile.exists()) {
                        String apkName = apkFile.getName();

                        //Extract and deassembly so files from apk

                        // DECOMPILING APK
                        File tmpApkDecompiledOutput = new File(Path.getApkSoFolderPath() + "~" + apkName);
                        apkManager.decompile(apkFile, tmpApkDecompiledOutput);
                        apkManager.soNormalization(tmpApkDecompiledOutput);

                        // DEASSEMBLING SO FILES
                        deassembler.generateSOFromApk(tmpApkDecompiledOutput);


                    } else {
                        System.out.println("Wrong path!!!");
                    }

                    break;
                case 3:
                    System.exit(0);
                    break;
                default:
                    System.out.print("Value not valid. Please, insert a valid choice: ");
                    break;
            }
        } while (choice <= 0 || choice > 3);
    }

    private static void createDirectories () {
        fileManager.createDirectory(Path.getResourcePath());
        fileManager.createDirectory(Path.getToolFolderPath());
        fileManager.createDirectory(Path.getApkSoFolderPath());
    }

    private static boolean downloadTools() throws IOException {
        //Url tools
        String urlApkTool = "https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.3.3.jar";
        String urlBinUtilitiesWithObjDump = "https://datapacket.dl.sourceforge.net/project/mingw/MinGW/Base/binutils/" +
                "binutils-2.28/binutils-2.28-1-mingw32-bin.tar.xz";
        String urlToolChain = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-" +
                "2018-q2-update-win32.zip?revision=9b83e69c-e279-4d16-9401-990c836197b3?product=" +
                "GNU%20Arm%20Embedded%20Toolchain,ZIP,,Windows,7-2018-q2-update";


        boolean apkToolsDownloadResult = false;
        boolean binUtilitiesDownloadResult = false;
        boolean toolChainDownloadResult = false;


        //Download apktool
        File apkTool = new File(Path.getApkToolPath());
        if (!apkTool.exists()) {
            System.out.println("ApkTool download");
            apkToolsDownloadResult = fileManager.downloadFile(urlApkTool, Path.getApkToolPath());
        } else {
            apkToolsDownloadResult = true;
            System.out.println("ApkTool already downloaded");
        }

        //Download objdump
        File objDump = new File(Path.getObjDumpPath());
        if (!objDump.exists()) {
            System.out.println("\nObjDump download");
            binUtilitiesDownloadResult = fileManager.downloadFile(urlBinUtilitiesWithObjDump, Path.getToolFolderPath() + "\\binUtilities.tar.xz");

            if (binUtilitiesDownloadResult) {
                //Take objdump from tar file
                fileManager.decompress(Path.getToolFolderPath() + "\\binUtilities.tar.xz", Path.getToolFolderPath() + "\\binUtilities");
                fileManager.deleteFile(Path.getToolFolderPath() + "\\binUtilities.tar.xz");
                FileUtils.copyFile(new File(Path.getToolFolderPath() + "\\binUtilities\\bin\\objdump.exe"), new File(Path.getToolFolderPath() + "\\objdump.exe"));
                fileManager.deleteFolder(new File(Path.getToolFolderPath() + "\\binUtilities"));
            }

        } else {
            binUtilitiesDownloadResult = true;
            System.out.println("ObjDump already downloaded");
        }

        //Download tool chain
        File ARMObjDump = new File(Path.getARMObjDumpPath());
        if (!ARMObjDump.exists()) {
            System.out.println("\nTool Chain download");
            toolChainDownloadResult = fileManager.downloadFile(urlToolChain, Path.getToolFolderPath() + "\\gcc-arm-none-eabi-7-2018-q2-update-win32.zip");

            if (toolChainDownloadResult) {
                //Take arm objdump from tar file
                fileManager.decompress(Path.getToolFolderPath() + "\\gcc-arm-none-eabi-7-2018-q2-update-win32.zip", Path.getToolFolderPath() + "ARMToolChain");
                fileManager.deleteFile(Path.getToolFolderPath() + "\\gcc-arm-none-eabi-7-2018-q2-update-win32.zip");
                FileUtils.copyFile(new File(Path.getToolFolderPath() + "ARMToolChain\\bin\\arm-none-eabi-objdump.exe"), new File(Path.getToolFolderPath() + "arm-none-eabi-objdump.exe"));
                fileManager.deleteFolder(new File(Path.getToolFolderPath() + "ARMToolChain"));
            }
        } else {
            toolChainDownloadResult = true;
            System.out.println("ARM ObjDump already downloaded");
        }

        return (apkToolsDownloadResult && binUtilitiesDownloadResult && toolChainDownloadResult);
    }

}
