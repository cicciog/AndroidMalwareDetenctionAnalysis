package AndroidMalwareAnalysis;

import FileManager.FileManager;

import java.io.*;
import java.util.ArrayList;
import java.util.Map;

public class AndroidMalwareAnalysis {

    public static void main (String [] args) throws IOException {
        // Path
        String urlApkTool = "https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.3.3.jar";
        String urlTelegramApk = "https://dw.uptodown.com/dwn/0hRxp_5CgddpHd9dsQb6M5ALA43tXfaBHu4DoILI-Q0Ax4xxKH9dcmvr3j" +
                "3RkD12Jehn6xbc32TxxKXEn3VmibiC-LFIeKOBaxv0bXCehKsqUJKRy7UKpalTJnHoR0kE/6m0pQJdfV7pGBuLX-Tz9xscPt2q2U6" +
                "QzkFcHFaBsVBOlUbX8b7TcZ44nAxTx6hilNRyO0tiXkmGHQguiRGztUnte-quBmQui2kw2ZJZUs1HSRDVNhQUE0nuGjq154wNO/" +
                "Jpd5mvecA_i41cXvRxLX8qgQv6QuuofV8vauuGAHeX_Ybzbq6byYegh1gqAI66olX1Ywq96yzWx1SJ460lL1VKJzyh0LibyQGKKr" +
                "Fu1pWE0yoDlWFJCnku1onseEnQjg/37O1OvAxS5BjuZv9nylKNjbGlzH1sCgqUq-5B-eXQck=/";
        String pathProject = System.getProperty("user.dir");
        String resourceDirectory = pathProject + "\\src\\main\\resources\\";

        String toolsDirectory = resourceDirectory + "tools";
        String apkDirectory = resourceDirectory + "apk";
        String apkREDirectory = resourceDirectory + "apkRE";
        String apkToolName = "apktool.jar";
        String objDumpName = "objdump.exe";
        String objDumpPath = "C:\\MinGW\\bin\\objdump.exe";


        Process process = null;
        ProcessBuilder processBuilder = new ProcessBuilder();

        String apk = null;
        String apkWithoutExt = null;

        FileManager fileManager = new FileManager();
        BufferedReader console = new BufferedReader(new InputStreamReader(System.in));

        System.out.println(toolsDirectory);
        System.out.println(apkDirectory);
        System.out.println(apkREDirectory);
        //If necessary, create work's directory
        fileManager.createDirectory(toolsDirectory);
        fileManager.createDirectory(apkDirectory);
        fileManager.createDirectory(apkREDirectory);

        //Download tools
        try {
            fileManager.downloadFile(urlApkTool, toolsDirectory + "\\" + apkToolName);
        } catch (IOException e) {
            System.out.println("Download file failed");
            e.getStackTrace();
        }

        System.out.println();
        System.out.println();

        //Retrieve apk list to analyze
        File apkFile = new File(apkDirectory);
        File [] apkList = apkFile.listFiles();

        System.out.println("Choose APK to analize:");

        for (int i = 0; i < apkList.length; i++) {
            System.out.println((i+1) + ") " + apkList[i].getName());
        }

        //If there is no file, download a trial apk (Monopoly)
        if (apkList.length == 0) {
            try {
                fileManager.downloadFile(urlTelegramApk, apkDirectory + "\\" + "Telegram.apk");
                System.out.println();
                System.out.println("1) Telegram.apk");

                apkFile = new File(apkDirectory);
                apkList = apkFile.listFiles();
            } catch (IOException e) {
                System.out.println("Download file failed");
                e.getStackTrace();
            }
        }

        System.out.println("0) Exit");
        
        System.out.println();
        System.out.print("APK to analyze: ");
        int chose = Integer.valueOf(console.readLine()) - 1;
        System.out.println();

        if(chose == -1){
            System.exit(0);
        }
        
        //Get name of apk
        apk = apkList[chose].getName();
        int pos = apk.lastIndexOf(".");
        if(pos > 0)
        {
            apkWithoutExt = apk.substring(0, pos);
            
        } else {
            apkWithoutExt = apk;
        }

        File apkREFile = new File(apkREDirectory + "\\" + apkWithoutExt);

        //If apk folder exists, the apk has already been decompiled
        if (!apkREFile.exists()) {

            //Decompiling choosed apk
            System.out.println("Apk decoding...");
            try {
                //Use apktool by command line to decompile apk
                String command = "java -jar " + toolsDirectory + "\\" + apkToolName + " d " + apkDirectory +
                        "\\" + apk + " -o " + apkREDirectory + "\\" + apkWithoutExt;

                process = Runtime.getRuntime().exec(command);
                process.waitFor();
                process.destroy();

            } catch (IOException | InterruptedException e) {
                System.out.println("Error: apk decoding failed");
                System.exit(0);
            }

            System.out.println("Operation successfully");
            System.out.println();


            //Delete all files and folder except directory with .so files
            System.out.println("Checking files and directories...");
            System.out.println();

            for (int i = 0; i < apkREFile.listFiles().length; i++) {
                File folder = apkREFile.listFiles()[i];

                System.out.println("File or directory found: " + folder.getName());

                if (!folder.getName().equals("AndroidManifest.xml") && !folder.getName().equals("lib") &&
                        !folder.getName().contains("smali")){
                    fileManager.deleteFolder(apkREFile.listFiles()[i]);
                    i--;
                    System.out.println("Deleted!");
                } else {
                    System.out.println("Ignored!");
                }

                System.out.println();
            }
        } else {
            System.out.println("Apk already decoded!");
        }

        //Decompile .so files
        String libPath = apkREDirectory + "\\" + apkWithoutExt + "\\lib";
        File apkLibDirectory = new File(libPath);

        System.out.println("Decompile .so file\n");

        try {
            for (File libSubFolder : apkLibDirectory.listFiles()) {
                for (File file : libSubFolder.listFiles()) {
                    //Decompile every .so file in the folder
                    if (file.getName().endsWith(".so")) {
                        String outputDecompiledFile = file.getAbsolutePath().concat(".decompiled.txt");

                        processBuilder.command(objDumpPath, "-d", file.getAbsolutePath());
                        processBuilder.directory(new File(libSubFolder.getAbsolutePath()));
                        processBuilder.redirectOutput(new File(outputDecompiledFile));

                        process = processBuilder.start();
                        process.waitFor();

                        String errorStream = fileManager.getStream(process.getErrorStream());

                        //If there is an error, delete the file that has been created
                        if (!errorStream.equals("")) {
                            File fileToDelete = new File(outputDecompiledFile);
                            fileToDelete.delete();
                        } else {
                            System.out.println("File " + file.getName() + " decompiled successfully!!!");
                        }

                        process.destroy();
                    }
                }
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
}
