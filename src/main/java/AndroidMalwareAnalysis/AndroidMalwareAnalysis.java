package AndroidMalwareAnalysis;

import FileManager.FileManager;

import java.io.*;

public class AndroidMalwareAnalysis {

    public static void main (String [] args) throws IOException {
        String urlApkTool = "https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.3.3.jar";
        String pathProject = System.getProperty("user.dir");
        String toolsFolder = "work\\tools";
        String apkFolder = "work\\apk";
        String apkREFolder = "work\\apkRE";
        String apkToolName = "apktool.jar";
        String apk = null;
        String apkWithoutExt = null;

        FileManager fileManager = new FileManager();
        BufferedReader console = new BufferedReader(new InputStreamReader(System.in));

        //If necessary, create work's directory
        fileManager.createDirectory(toolsFolder);
        fileManager.createDirectory(apkFolder);
        fileManager.createDirectory(apkREFolder);

        //Download tools
        try {
            fileManager.downloadFile(urlApkTool, toolsFolder + "/" + apkToolName);
        } catch (IOException e) {
            System.out.println("Download file failed");
            e.getStackTrace();
        }

        System.out.println();
        System.out.println();

        //Retrieve apk list to analyze
        File apkDirectory = new File(apkFolder);
        File [] listOfFiles = apkDirectory.listFiles();

        System.out.println("Choose APK to analize:");

        for (int i = 0; i < listOfFiles.length; i++) {
            System.out.println((i+1) + ") " + listOfFiles[i].getName());
        }

        System.out.println("0) Exit");
        
        System.out.println();
        System.out.print("APK to analyze: ");
        int chose = Integer.valueOf(console.readLine()) - 1;
        System.out.println();

        if(chose == -1){
            System.exit(0);
        }
        
        //get name of apk
        apk = listOfFiles[chose].getName();
        int pos = apk.lastIndexOf(".");
        if(pos > 0)
        {
            apkWithoutExt = apk.substring(0, pos);
            
        } else {
            apkWithoutExt = apk;
        }
        //Decompiling choosed apk
        System.out.println("Apk decoding...");
        try {
            fileManager.executeCommand("java -jar " + pathProject + "\\" + toolsFolder + "\\" + apkToolName + " d " +
                    pathProject + "\\" + apkFolder + "\\" + apk + " -o " + pathProject + "\\" + apkREFolder + "\\" +
                    apkWithoutExt);
        } catch (IOException | InterruptedException e) {
            System.out.println("Error: apk decoding failed");
            System.exit(0);
        }

        System.out.println("Operation successfully");
        System.out.println();

        //Delete all files and folder except directory with .so files
        File apkREFile = new File(pathProject + "\\" + apkREFolder + "\\" + apkWithoutExt);

        System.out.println("Checking files and directories...");
        System.out.println();

        for (int i = 0; i < apkREFile.listFiles().length; i++) {
            File folder = apkREFile.listFiles()[i];

            System.out.println("File or directory found: " + folder.getName());

            if (!folder.getName().equals("AndroidManifest.xml") && !folder.getName().equals("lib") &&
                    !folder.getName().contains("smali")){
                fileManager.deleteFolder(apkREFile.listFiles()[i]);
                i--;
                System.out.println("Deleted!");
            } else {
                System.out.println("Ignored!");
            }

            System.out.println();
        }
    }
}
