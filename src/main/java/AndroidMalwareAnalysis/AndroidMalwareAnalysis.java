package AndroidMalwareAnalysis;

import APK.ApkManager;
import Deassembler.Deassembler;
import DroidNative.DroidNative;
import FileManager.FileManager;
import FileManager.Path;
import org.apache.commons.io.FileUtils;

import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;

public class AndroidMalwareAnalysis {

    public static void main (String [] args) throws Exception {
        BufferedReader console = new BufferedReader(new InputStreamReader(System.in));
        FileManager fileManager = new FileManager();
        DroidNative droidNative = new DroidNative();
        ApkManager apkManager = new ApkManager();
        Deassembler deassembler = new Deassembler();

        String apkPath = null;

        System.out.println("ANDROID MALWARE ANALYSIS\n");

        initDir();


        //############################################## STEP 1: DOWNLOAD
        //Download tools
        apkManager.downloadApkTool();
        deassembler.downloadDeassemblerTools();

        //Download and build DroidNative
        File droidnativeFolder = new File(Path.getDroidNativeFolderPath());
        if (!droidnativeFolder.exists()) {
            droidNative.downloadDroidNativeCode();

            //Build DroidNative
            System.out.println("Run DroidNative Build Script\n");
            droidNative.build();
            droidNative.folderNormalization();
            System.out.println("\nDroidNative builded successfully\n");
        }


        //############################################## STEP 2: MALWARE FAMILY SETUP
        //Check if malwareFamilies folder exist
        File malwareFamilies = new File(Path.getMalwareFamiliesPath());
        if (!malwareFamilies.exists()) {
            System.out.print("Malware families folder not found\nInsert path of malware families: ");
            String path = console.readLine();
            System.out.println();

            File pathFolder = new File(path);

            while (!pathFolder.exists() || !pathFolder.isDirectory()) {
                System.out.print("Insert a valid path: ");
                path = console.readLine();
                System.out.println();

                pathFolder = new File(path);
            }

            FileUtils.copyDirectory(pathFolder, new File(Path.getMalwareFamiliesPath()));
        }

        //Generate v_samples.txt
        generateVSamplesTxt();


        //############################################## STEP 3: APK ANALYSIS
        //Apk to analyse
        System.out.print("Insert apk to analyse: ");
        apkPath = console.readLine();
        System.out.println();

        File apk = new File(apkPath);

        //Analyse apk file
        if (apk.exists()) {
            String apkName = apk.getName();

            System.out.println("Apk to analyse: " + apkName + "\n");

            //Extract and deassembly so files from apk

            System.out.println("Step 1: Decompile apk");
            // DECOMPILING APK
            File apkOutFolder = new File(Path.getApkFolderPath() + apkName);
            apkManager.decompile(apk, apkOutFolder);
            apkManager.soNormalization(apkOutFolder);

            //So folder
            File soFolder = new File(apkOutFolder.getAbsolutePath() + File.separator + "so");

            //Create soDeassembly
            File soDeassemblyFolder = fileManager.createSubDirectory(apkOutFolder, "soDeassembly");


            System.out.println("Step 2: Deassembly so files");

            File arSoDeassembly = null;
            //For each so file, generate its assembly
            for (File arFolder : soFolder.listFiles()) {
                if (arFolder.getName().equals("armeabi")) {
                    //Create the same folder in soDeassemblyFolder
                    arSoDeassembly = fileManager.createSubDirectory(soDeassemblyFolder, arFolder.getName());

                    for (File soFile : arFolder.listFiles()) {
                        String soDeassembledName = soFile.getName() + "_ARMDecompiled.txt";

                        // DEASSEMBLING SO FILE
                        deassembler.disassemblyARMArchitecture(soFile, new File(arSoDeassembly.getAbsolutePath()
                                + File.separator + soDeassembledName));
                    }
                }
            }

            FileUtils.deleteDirectory(soFolder);


            System.out.println("Step 3: Cross validation with different malware's families\n");

            //Get list of all so file to analyse
            ArrayList<File> soDeassemblyFiles = new ArrayList<>(Arrays.asList(arSoDeassembly.listFiles()));

            //Path of b_samples.txt
            String bSamplesPath = apkOutFolder + File.separator + "b_samples.txt";

            //List of all v_samples.txt files
            ArrayList<File> malwareFamiliesSamples = getMalwareFamiliesSamples();
            //fileManager.saveFile(bSamplesPath, soDeassemblyPaths);

            //Create s folder in order to save results in it
            File resultsFolder = fileManager.createSubDirectory(apkOutFolder, "Results");


            //For each so file, run cross script validation with all malware family
            for (File soDeassemblyFile : soDeassemblyFiles) {
                System.out.println("SO File to analyse: " + soDeassemblyFile.getName() + "\n");

                //Result folder of so file
                File soResultFolder = fileManager.createSubDirectory(resultsFolder, soDeassemblyFile.getName().split("_")[0]);

                //b_samples.txt of this so file
                fileManager.saveFile(bSamplesPath, soDeassemblyFile.getAbsolutePath());

                int i = 1;
                for (File vSamples : malwareFamiliesSamples) {
                    //Family
                    File malwareFamily = vSamples.getParentFile();

                    //Run cross validation script
                    System.out.println("Cross validation: " + i++ + " of " + malwareFamiliesSamples.size());
                    System.out.println("Malware family: " + malwareFamily.getName());
                    System.out.println("Run Script...");
                    droidNative.runCrossValidationACFG(bSamplesPath, vSamples.getAbsolutePath(), soResultFolder.getAbsolutePath());


                    //Delete, in result, all files except result
                    for (File scriptFileGenerated : soResultFolder.listFiles()) {
                        if (!scriptFileGenerated.getName().contains("result")) {
                            FileUtils.forceDelete(scriptFileGenerated);
                        } else {
                            scriptFileGenerated.renameTo(new File(scriptFileGenerated.getParent() + File.separator +
                                    "result_" + malwareFamily.getName() + ".txt"));
                        }
                    }
                }

                //Delete b_samples
                FileUtils.forceDelete(new File(bSamplesPath));
            }

            int i = 1;


        }
    }


    private static void initDir () {
        FileManager fileManager = new FileManager();
        Path path = new Path();
        fileManager.createDirectory(path.getResourcePath());
        fileManager.createDirectory(path.getToolFolderPath());
        fileManager.createDirectory(path.getApkFolderPath());
    }

    /**
     * Generate v_samples.txt for each malware's family, that contain all paths of so file
     */
    private static void generateVSamplesTxt () throws IOException {
        File malwareFolder = new File(Path.getMalwareFamiliesPath());
        File [] malwareFamilies = malwareFolder.listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                if (pathname.isDirectory())
                    return true;
                return false;
            }
        });

        FileManager fileManager = new FileManager();
        int i = 1;

        for (File malwareFamily : malwareFamilies) {
            //Create text file in order to save soDeassembly Path
            String saveVSamplesPath = malwareFamily.getAbsolutePath() + File.separator + "v_samples.txt";
            ArrayList<String> soDeassembledPaths = new ArrayList<>();

            File [] malwares = malwareFamily.listFiles(new FileFilter() {
                @Override
                public boolean accept(File pathname) {
                    if (pathname.isDirectory())
                        return true;
                    return false;
                }
            });

            for (File malware : malwares) {
                File [] malwareSubFolders = malware.listFiles(new FileFilter() {
                    @Override
                    public boolean accept(File pathname) {
                        if (pathname.getName().equals("soDeassembly"))
                            return true;
                        return false;
                    }
                });

                if (malwareSubFolders.length > 0) {
                    File malwareSoDeassemblyFolder = malwareSubFolders[0];

                    if (malwareSoDeassemblyFolder.listFiles().length == 0)
                        FileUtils.deleteDirectory(malware);
                    else {
                        File [] soFiles = malwareSoDeassemblyFolder.listFiles()[0].listFiles();

                        for (File soFile : soFiles) {
                            soDeassembledPaths.add(soFile.getAbsolutePath());
                        }
                    }
                }
            }

            fileManager.saveFile(saveVSamplesPath, soDeassembledPaths);
        }
    }

    private static ArrayList<File> getMalwareFamiliesSamples () {
        ArrayList<File> malwareFamiliesSamples = new ArrayList<>();

        File malwareFolder = new File(Path.getMalwareFamiliesPath());
        File [] malwareFamilies = malwareFolder.listFiles();

        for (File malwareFamily : malwareFamilies) {
            malwareFamiliesSamples.add(new File(malwareFamily.getAbsolutePath() + File.separator + "v_samples.txt"));
        }

        return malwareFamiliesSamples;
    }
}
