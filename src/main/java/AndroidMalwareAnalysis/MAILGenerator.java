package AndroidMalwareAnalysis;

import APK.ApkManager;
import CFG.DroidNative;
import Deassembler.Deassembler;
import FileManager.FileManager;
import FileManager.Path;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.IOException;

public class MAILGenerator {
    /**
     * Args:
     * 1) Path of apk to analyse
     * 2) Path where saving file extracted from apk
     */
    public static void main (String [] args) throws Exception {
        if (args.length <= 0 || args.length > 2 || !checkArgsValidity(args)) {
            System.out.println("Error:MAILGenerator:main: Wrong parameters");
            System.out.println("Usage for running MAILGenerator: java -jar MAILGenerator.jar <apk_file>");
            System.out.println("Usage for running MAILGenerator: java -jar MAILGenerator.jar <apk_file> <output_dir>");
            System.exit(0);
        }

        System.out.println("MAIL Generator Program\n");


        //Variables
        FileManager fileManager = new FileManager();
        Path path = new Path();

        ApkManager apkManager = new ApkManager();
        Deassembler deassembler = new Deassembler();
        DroidNative droidNative = new DroidNative();

        File apk = new File(args[0]);
        if (args.length == 2) {
            path.setApkFolderPath(args[1] + File.separator);
        }


        //Create default directories
        initDir(path);


        //Download tools
        apkManager.downloadApkTool();
        deassembler.downloadDeassemblerTools();


        //Download and build DroidNative
        File droidnativeFolder = new File(path.getDroidNativeFolderPath());
        if (!droidnativeFolder.exists()) {
            droidNative.downloadDroidNativeCode();

            //Build DroidNative
            System.out.println("Run DroidNative Build Script\n");
            droidNative.build();
            droidNative.folderNormalization();
            System.out.println("\nDroidNative builded successfully\n");
        }


        //Analyse apk file
        if (apk.exists()) {
            String apkName = apk.getName();

            System.out.println("Apk to analyse: " + apkName + "\n");

            //Extract and deassembly so files from apk

            System.out.println("Step 1: Decompile apk");
            // DECOMPILING APK
            File apkOutFolder = new File(path.getApkFolderPath() + apkName);
            apkManager.decompile(apk, apkOutFolder);
            apkManager.soNormalization(apkOutFolder);

            //So folder
            File soFolder = new File(apkOutFolder.getAbsolutePath() + File.separator + "so");

            //Create soDeassembly and MAIL folder
            File soDeassemblyFolder = fileManager.createSubDirectory(apkOutFolder, "soDeassembly");
            File MAILFolder = fileManager.createSubDirectory(apkOutFolder, "MAIL");


            System.out.println("Step 2: Deassembly so files");
            //For each so file, generate its assembly and MAIL file
            for (File arFolder : soFolder.listFiles()) {
                //Create the same folder in soDeassemblyFolder and MAILFolder
                File arSoDeassembly = fileManager.createSubDirectory(soDeassemblyFolder, arFolder.getName());
                File arMAIL = fileManager.createSubDirectory(MAILFolder, arFolder.getName());

                if (arFolder.getName().contains("arm")) {
                    for (File soFile : arFolder.listFiles()) {
                        String soDeassembledName = soFile.getName() + "_ARMDecompiled.txt";
                        String soMAILName = soFile.getName() + "_MAIL.txt";

                        // DEASSEMBLING SO FILE
                        deassembler.disassemblyARMArchitecture(soFile, new File(arSoDeassembly.getAbsolutePath()
                                + File.separator + soDeassembledName));

                        File deassembledFile = new File(arSoDeassembly.getAbsolutePath() + File.separator + soDeassembledName);
                        droidNative.generateMAIL(deassembledFile, new File(arMAIL.getAbsolutePath() + File.separator + soMAILName));

                    }
                } else {
                    for (File soFile : arFolder.listFiles()) {
                        String soDeassembledName = soFile.getName() + "_X86Decompiled.txt";
                        String soMAILName = soFile.getName() + "_MAIL.txt";

                        // DEASSEMBLING SO FILE
                        deassembler.disassemblyX86Architecture(soFile, new File(arSoDeassembly.getAbsolutePath()
                                + File.separator + soDeassembledName));

                        File deassembledFile = new File(arSoDeassembly.getAbsolutePath() + File.separator + soDeassembledName);
                        droidNative.generateMAIL(deassembledFile, new File(arMAIL.getAbsolutePath() + File.separator + soMAILName));
                    }
                }
            }
        }

    }

    private static boolean checkArgsValidity (String [] args) {
        File apk = new File(args[0]);
        //Apk not valid
        if (!apk.exists() || !apk.isFile())
            return false;

        return true;
    }

    private static void initDir (Path path) {
        FileManager fileManager = new FileManager();
        fileManager.createDirectory(path.getResourcePath());
        fileManager.createDirectory(path.getToolFolderPath());
        fileManager.createDirectory(path.getApkFolderPath());
    }
}
