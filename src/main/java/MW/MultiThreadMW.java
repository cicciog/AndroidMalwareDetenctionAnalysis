package MW;

import APK.ApkManager;
import Deassembler.Deassembler;
import FileManager.FileManager;
import FileManager.Path;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.locks.ReentrantLock;

public class MultiThreadMW {
    private final static int NUMBER_OF_THREAD = 20;

    private static String malwareSoFolder;
    private static String armSoFolder;
    private static String x86SoFolder;
    private static String tmpMalwareFolder;

    private static File armSoFolderFile;
    private static File x86SoFolderFile;

    private ReentrantLock lock = new ReentrantLock();
    private FileManager fileManager;
    private ApkManager apkManager;
    private Deassembler deassembler;

    private ArrayList<File> apkList = null;
    private int fileToAnalyse;


    public MultiThreadMW () {
        this.fileManager = new FileManager();
        this.apkManager = new ApkManager();
        this.deassembler = new Deassembler();

        this.malwareSoFolder = Path.getMalwareSoFolderPath();

        if (System.getProperty("os.name").contains("Windows")) {
            this.armSoFolder = this.malwareSoFolder + "arm\\";
            this.x86SoFolder = this.malwareSoFolder + "x86\\";
            this.tmpMalwareFolder = this.malwareSoFolder + "tmp\\";
        } else {
            this.armSoFolder = this.malwareSoFolder + "arm/";
            this.x86SoFolder = this.malwareSoFolder + "x86/";
            this.tmpMalwareFolder = this.malwareSoFolder + "tmp/";
        }

        this.armSoFolderFile = new File(this.armSoFolder);
        this.x86SoFolderFile = new File(this.x86SoFolder);

        this.apkList = new ArrayList<>();
        this.fileToAnalyse = 0;
    }

    public void startMultiThreadMW (String mwPath) {
        //Creation of folder to malware so
        fileManager.createDirectory(Path.getMalwareSoFolderPath());

        //Creation of tmp folder, in order to decompress malware until they will analyse
        fileManager.createDirectory(this.tmpMalwareFolder);

        //Get all path of malware's families
        File [] mwFolders = new File(mwPath).listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                if (pathname.isDirectory())
                    return true;
                return false;
            }
        });

        //Take all mw files
        for (File mwFolder : mwFolders) {
            this.apkList.addAll(Arrays.asList(mwFolder.listFiles()));
        }

        System.out.print("Percentual to complete: 0%");
        for (int i = 0; i < NUMBER_OF_THREAD; i++) {
            ThreadMW threadMW = new ThreadMW(i);
            threadMW.start();
        }
    }

    private class ThreadMW extends Thread {
        private int indexToAnalyse;
        private String tmpFolderPath;

        private int indexOfThread;

        public ThreadMW (int pIndexOfThread) {
            this.indexOfThread = pIndexOfThread;

            this.indexToAnalyse = 0;
            this.tmpFolderPath = tmpMalwareFolder + "Thread_" + (this.indexOfThread + 1);
        }

        @Override
        public void run() {
            while ((this.indexToAnalyse = indexFileToAnalyse()) < apkList.size()) {
                //Apk file to analyse
                File apk = apkList.get(this.indexToAnalyse);

                //Folder used to decompress our apk
                File tmpFolder = new File(this.tmpFolderPath);


                //Decompile apk mw
                apkManager.decompile(apk, tmpFolder);
                apkManager.soNormalization(tmpFolder);


                File libFolder = null;

                //Search libFolder
                int i = 0;
                while (i < tmpFolder.listFiles().length && !tmpFolder.listFiles()[i].getName().contains("lib")) i++;

                if (i < tmpFolder.listFiles().length)
                    libFolder = tmpFolder.listFiles()[i];


                if (libFolder != null) {
                    System.out.println("\nThread " + (this.indexOfThread + 1) + " - So Deassembly");
                    System.out.println("Apk Family: " + apk.getParentFile().getName());
                    System.out.println("Apk Name: " + apk.getName() + "\n");

                    //Search arm and x86 so folders, into lib folder
                    File armFolder = null;
                    File x86Folder = null;

                    i = 0;
                    while (i < libFolder.listFiles().length) {
                        //Arm folder
                        if (libFolder.listFiles()[i].getName().contains("arm") && !libFolder.listFiles()[i].getName().contains("64")) {
                            armFolder = libFolder.listFiles()[i];
                        }

                        //x86 folder
                        if (libFolder.listFiles()[i].getName().equals("x86")) {
                            x86Folder = libFolder.listFiles()[i];
                        }

                        i++;
                    }


                    if (armFolder != null) {

                        //Check if it's already created armSoFolder
                        if (!armSoFolderFile.exists()) {
                            fileManager.createDirectory(armSoFolder);
                        }

                        //Check if it's already created family's folder
                        File apkFamilySoFolder = new File(armSoFolder + apk.getParentFile().getName());
                        if (!apkFamilySoFolder.exists()) {
                            fileManager.createDirectory(armSoFolder + apk.getParentFile().getName());
                        }

                        //Create mw folder
                        File apkSoFolder = null;
                        if (System.getProperty("os.name").contains("Windows")) {
                            apkSoFolder = new File(apkFamilySoFolder + "\\" + apk.getName());
                        } else {
                            apkSoFolder = new File(apkFamilySoFolder + "/" + apk.getName());
                        }
                        fileManager.createDirectory(apkSoFolder.getAbsolutePath());

                        //ARM So deassembly
                        for (File soFile : armFolder.listFiles()) {
                            File outputSoFile = null;
                            if (System.getProperty("os.name").contains("Windows")) {
                                outputSoFile = new File(apkSoFolder.getAbsolutePath() + "\\" + soFile.getName() + "_ARMDecompiled.txt");
                            } else {
                                outputSoFile = new File(apkSoFolder.getAbsolutePath() + "/" + soFile.getName() + "_ARMDecompiled.txt");
                            }

                            try {
                                deassembler.disassemblyARMArchitecture(soFile, outputSoFile);
                            } catch (IOException | InterruptedException e) {
                                System.out.println(e.getMessage());
                            }
                        }
                    }


                    if (x86Folder != null) {

                        //Check if it's already created x86SoFolder
                        if (!x86SoFolderFile.exists()) {
                            fileManager.createDirectory(x86SoFolder);
                        }

                        //Check if it's already created family's folder
                        File apkFamilySoFolder = new File(x86SoFolder + apk.getParentFile().getName());
                        if (!apkFamilySoFolder.exists()) {
                            fileManager.createDirectory(x86SoFolder + apk.getParentFile().getName());
                        }

                        //Create mw folder
                        File apkSoFolder = null;
                        if (System.getProperty("os.name").contains("Windows")) {
                            apkSoFolder = new File(apkFamilySoFolder + "\\" + apk.getName());
                        } else {
                            apkSoFolder = new File(apkFamilySoFolder + "/" + apk.getName());
                        }
                        fileManager.createDirectory(apkSoFolder.getAbsolutePath());

                        //X86 So deassembly
                        for (File soFile : armFolder.listFiles()) {
                            File outputSoFile = null;
                            if (System.getProperty("os.name").contains("Windows")) {
                                outputSoFile = new File(apkFamilySoFolder.getAbsolutePath() + "\\" + soFile.getName() + "_X86Decompiled.txt");
                            } else {
                                outputSoFile = new File(apkFamilySoFolder.getAbsolutePath() + "/" + soFile.getName() + "_X86Decompiled.txt");
                            }

                            try {
                                deassembler.disassemblyX86Architecture(soFile, outputSoFile);
                            } catch (IOException | InterruptedException e) {
                                System.out.println(e.getMessage());
                            }
                        }
                    }
                    System.out.printf("Percentual to complete: %.2f%%", ((double)fileToAnalyse/apkList.size())*100);
                }

                fileManager.deleteFolder(tmpFolder);

                System.out.printf("\rPercentual to complete: %.2f%%", ((double)fileToAnalyse/apkList.size())*100);
            }
        }

        /*
         * Mutual exclusion applied to the variable fileToAnalyse, to avoid that 2 or more process are going
         * to analyse the same malware
         */
        private int indexFileToAnalyse () {
            int index = 0;

            lock.lock();

            try {
                index = fileToAnalyse;
                fileToAnalyse++;
            } finally {
                lock.unlock();
            }

            return index;
        }

    }
 }
