package MW;

import APK.ApkManager;
import CFG.DroidNative;
import Deassembler.Deassembler;
import FileManager.FileManager;
import FileManager.Path;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.locks.ReentrantLock;

public class MultiThreadMW {
    private int numberOfThread;

    private static String malwareSoFolder;
    private static String armSoFolder;
    private static String x86SoFolder;

    private ReentrantLock lock = new ReentrantLock();
    private FileManager fileManager;
    private ApkManager apkManager;
    private Deassembler deassembler;
    private DroidNative droidNative;

    private ArrayList<File> apkList = null;
    private int fileToAnalyse;


    public MultiThreadMW (int numberOfThread) {
        this.fileManager = new FileManager();
        this.apkManager = new ApkManager();
        this.deassembler = new Deassembler();
        this.droidNative = new DroidNative();

        this.malwareSoFolder = Path.getMalwareFolderPath();

        this.armSoFolder = this.malwareSoFolder + "arm" + File.separator;
        this.x86SoFolder = this.malwareSoFolder + "x86" + File.separator;

        this.apkList = new ArrayList<>();
        this.fileToAnalyse = 0;

        this.numberOfThread = numberOfThread;
        if (numberOfThread > 20) {
            this.numberOfThread = 20;
        }
    }

    public void startMultiThreadMW (String mwPath) {
        //Creation of folder to malware so
        fileManager.createDirectory(Path.getMalwareFolderPath());

        //Get all path of malware's families
        File [] mwFolders = new File(mwPath).listFiles(new FileFilter() {
            @Override
            public boolean accept(File pathname) {
                if (pathname.isDirectory())
                    return true;
                return false;
            }
        });

        //Take all mw files
        for (File mwFolder : mwFolders) {
            this.apkList.addAll(Arrays.asList(mwFolder.listFiles()));
        }

        System.out.print("Percentual to complete: 0%");
        for (int i = 0; i < this.numberOfThread; i++) {
            ThreadMW threadMW = new ThreadMW(i);
            threadMW.start();
        }
    }

    private class ThreadMW extends Thread {
        private int indexToAnalyse;

        private int indexOfThread;

        public ThreadMW (int pIndexOfThread) {
            this.indexOfThread = pIndexOfThread;

            this.indexToAnalyse = 0;
        }

        @Override
        public void run() {
            while ((this.indexToAnalyse = indexFileToAnalyse()) < apkList.size()) {
                //Apk file to analyse
                File apk = apkList.get(this.indexToAnalyse);

                //If mw family folder is not created yet, create it
                File apkFamily = new File(malwareSoFolder + apk.getParentFile().getName());
                if (!apkFamily.exists()) {
                    fileManager.createDirectory(apkFamily.getAbsolutePath());
                }

                //Create mw folder
                File mwFolder = new File(apkFamily.getAbsolutePath() + File.separator + apk.getName());

                //Decompile apk mw
                apkManager.decompile(apk, mwFolder);
                try {
                    apkManager.soNormalization(mwFolder);
                } catch (IOException e) {
                    e.printStackTrace();
                }

                //So folder
                File soFolder = new File(mwFolder.getAbsolutePath() + File.separator + "so");


                if (soFolder.exists()) {
                    System.out.println("\nThread " + (this.indexOfThread + 1) + " - So Deassembly");
                    System.out.println("Apk Family: " + apk.getParentFile().getName());
                    System.out.println("Apk Name: " + apk.getName() + "\n");


                    //Create soDeassembly and MAIL folder
                    File soDeassemblyFolder = fileManager.createSubDirectory(mwFolder, "soDeassembly");
                    File MAILFolder = fileManager.createSubDirectory(mwFolder, "MAIL");

                    try {
                        //For each so file, generate its assembly and MAIL file
                        for (File arFolder : soFolder.listFiles()) {
                            //Create the same folder in soDeassemblyFolder and MAILFolder
                            File arSoDeassembly = fileManager.createSubDirectory(soDeassemblyFolder, arFolder.getName());
                            File arMAIL = fileManager.createSubDirectory(MAILFolder, arFolder.getName());

                            if (arFolder.getName().contains("arm")) {
                                for (File soFile : arFolder.listFiles()) {
                                    String soDeassembledName = soFile.getName() + "_ARMDecompiled.txt";
                                    String soMAILName = soFile.getName() + "_MAIL.txt";

                                    // DEASSEMBLING SO FILE
                                    deassembler.disassemblyARMArchitecture(soFile, new File(arSoDeassembly.getAbsolutePath()
                                            + File.separator + soDeassembledName));

                                    //MAIL Generation
                                    File deassembledFile = new File(arSoDeassembly.getAbsolutePath() + File.separator + soDeassembledName);
                                    droidNative.generateMAIL(deassembledFile, new File(arMAIL.getAbsolutePath() + File.separator + soMAILName));

                                }
                            } else {
                                for (File soFile : arFolder.listFiles()) {
                                    String soDeassembledName = soFile.getName() + "_X86Decompiled.txt";
                                    String soMAILName = soFile.getName() + "_MAIL.txt";

                                    // DEASSEMBLING SO FILE
                                    deassembler.disassemblyX86Architecture(soFile, new File(arSoDeassembly.getAbsolutePath()
                                            + File.separator + soDeassembledName));

                                    //MAIL Generation
                                    File deassembledFile = new File(arSoDeassembly.getAbsolutePath() + File.separator + soDeassembledName);
                                    droidNative.generateMAIL(deassembledFile, new File(arMAIL.getAbsolutePath() + File.separator + soMAILName));
                                }
                            }
                        }
                    } catch (Exception e) { e.printStackTrace(); }
                } else {
                    System.out.print("\r");
                    try {
                        FileUtils.deleteDirectory(mwFolder);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                System.out.printf("Percentual to complete: %.2f%%", ((double)fileToAnalyse/apkList.size())*100);
            }
        }

        /*
         * Mutual exclusion applied to the variable fileToAnalyse, to avoid that 2 or more process are going
         * to analyse the same malware
         */
        private int indexFileToAnalyse () {
            int index = 0;

            lock.lock();

            try {
                index = fileToAnalyse;
                fileToAnalyse++;
            } finally {
                lock.unlock();
            }

            return index;
        }

    }
 }
