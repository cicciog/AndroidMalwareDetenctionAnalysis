package APK;

import Deassembler.Deassembler;
import FileManager.FileManager;
import FileManager.Path;

import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.IOException;

public class ApkManager {
    private FileManager fileManager;

    public ApkManager () {
        this.fileManager = new FileManager();
    }


    public void decompile(File input, File output) {
        Process process = null;

        //Get apk name from input file
        String name = input.getName();

        String apkDirectory = input.getAbsolutePath().substring(0, input.getAbsolutePath().lastIndexOf("\\"));
        String apk = input.getAbsolutePath().substring(input.getAbsolutePath().lastIndexOf("\\") + 1,
                input.getAbsolutePath().length());

        String apkWithoutExt;
        int pos = apk.lastIndexOf(".");
        if(pos > 0)
        {
            apkWithoutExt = apk.substring(0, pos);

        } else {
            apkWithoutExt = apk;
        }


        //Decompile

        //If apk folder exists, the apk has already been decompiled
        if (!output.exists()) {
            //Decompiling choosed apk
            try {
                //Use apktool by command line to decompile apk
                String command = "java -jar " + Path.getApkToolPath() + " d " + input + " -o " + output;

                process = Runtime.getRuntime().exec(command);
                process.waitFor();
                process.destroy();

            } catch (IOException | InterruptedException e) {
                System.out.println("Error: apk decoding failed");
                System.exit(0);
            }

        }
    }

    /**
     * Delete all file and folder, except so files.
     * Specifically, only so files with x86 and arm architecture
     * @param input
     */
    public void soNormalization(File input) {
        for (File folder : input.listFiles()) {
            if (folder.isFile()) {
                folder.delete();
            } else {
                if (folder.getName().equals("lib")) {
                    File [] libSubFolders = folder.listFiles();

                    for (File libFolder : libSubFolders) {
                        if (!((libFolder.getName().contains("arm") && !libFolder.getName().contains("64")) ||
                                libFolder.getName().equals("x86"))) {
                            fileManager.deleteFolder(libFolder);
                        }
                    }
                } else {
                    fileManager.deleteFolder(folder);
                }
            }
        }
    }
}
