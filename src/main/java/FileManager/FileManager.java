package FileManager;

import org.apache.commons.io.FileUtils;

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class FileManager {

    //RAR Program Path
    String winrarPath1 = "C:\\Program Files\\WinRAR\\WinRAR.exe";
    String winrarPath2 = "C:\\Program Files (x86)\\WinRAR\\WinRAR.exe";
    String path7Zip1 = "C:\\Program Files\\7-Zip\\7z.exe";
    String path7Zip2 = "C:\\Program Files (x86)\\7-Zip\\7z.exe";

    public boolean downloadFile (String urlStr, String filePath) {
        boolean fileAlreadyDownloaded = false;
        File file = new File(filePath);

        if (!file.exists()) {
            int downloadedBytes = 0;
            float percentuale = 0;
            int timer = 0;

            try {
                URL url = new URL(urlStr);

                //Size of file
                URLConnection urlConnection = url.openConnection();
                urlConnection.connect();
                int fileSize = urlConnection.getContentLength();

                BufferedInputStream bis = new BufferedInputStream(url.openStream());
                FileOutputStream fis = new FileOutputStream(filePath);
                byte[] buffer = new byte[1024];
                int count = 0;

                System.out.println("Download is starting...");
                System.out.print("Downloading...: 0.00%");

                while ((count = bis.read(buffer, 0, 1024)) != -1) {
                    fis.write(buffer, 0, count);

                    downloadedBytes += count;

                    if ((timer++ % 1000) == 0) {
                        percentuale = ((float) downloadedBytes / fileSize) * 100;
                        System.out.printf("\rDownloading...: %.2f%%", percentuale);
                    }
                }

                System.out.println("\rDownloading...: 100%");
                System.out.println("Download completed!!!");

                fis.close();
                bis.close();

                fileAlreadyDownloaded = true;
            } catch (IOException e) {
                fileAlreadyDownloaded = false;
                e.printStackTrace();
            }

        } else {
            fileAlreadyDownloaded = true;
        }

        return fileAlreadyDownloaded;
    }

    public boolean createDirectory (String path) {
        boolean directoryAlreadyCreated = false;
        File directory = new File(path);

        if (!directory.exists()) {
            directoryAlreadyCreated = directory.mkdirs();
        }

        return directoryAlreadyCreated;
    }

    public void deleteFolder(File folder) {
        File[] files = folder.listFiles();
        if (files!=null) {
            for (File f: files) {
                if (f.isDirectory()) {
                    deleteFolder(f);
                } else {
                    f.delete();
                }
            }
        }
        folder.delete();
    }

    public void deleteFile (String path) {
        File fileToDelete = new File(path);

        if (fileToDelete.isFile()) {
            fileToDelete.delete();
        }
    }

    public String getStream (InputStream inputStream) {
        StringBuffer stream = new StringBuffer();

        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));

        String line = "";

        try {
            while ((line = reader.readLine())!= null) {
                stream.append(line + "\n");
            }
        } catch (IOException e) {}


        return stream.toString();
    }

    public boolean decompress (String sourcePath, String destPath) {
        String programRarPath = "";

        File winRarFilePath1 = new File(winrarPath1);
        File winRarFilePath2 = new File(winrarPath2);
        File path7ZipFile1 = new File(path7Zip1);
        File path7ZipFile2 = new File(path7Zip2);

        if (winRarFilePath1.exists()) {
            programRarPath = winrarPath1;
        } else if (winRarFilePath2.exists()) {
            programRarPath = winrarPath2;
        } else if (path7ZipFile1.exists()) {
            programRarPath = path7Zip1;
        } else if (path7ZipFile2.exists()) {
            programRarPath = path7Zip2;
        } else {
            return false;
        }

        createDirectory(destPath);

        String command = programRarPath + " x -ibck " + sourcePath + " *.* " + destPath;

        try {
            Process proc = Runtime.getRuntime().exec(command);
            proc.waitFor();
            proc.destroy();
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }


        return true;
    }
}