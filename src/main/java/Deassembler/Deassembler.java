package Deassembler;

import FileManager.FileManager;
import FileManager.Path;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

public class Deassembler {
    private static final String urlBinUtilitiesWithObjDump = "https://datapacket.dl.sourceforge.net/project/mingw/MinGW/" +
            "Base/binutils/binutils-2.28/binutils-2.28-1-mingw32-bin.tar.xz";
    private static final String urlToolChain = "https://developer.arm.com/-/media/Files/downloads/gnu-rm/7-2018q2/" +
            "gcc-arm-none-eabi-7-2018-q2-update-win32.zip?revision=9b83e69c-e279-4d16-9401-990c836197b3?product=" +
            "GNU%20Arm%20Embedded%20Toolchain,ZIP,,Windows,7-2018-q2-update";

    private FileManager fileManager;

    public Deassembler () {
        this.fileManager = new FileManager();
    }

    public void downloadDeassemblerTools () throws Exception {
        //Download objdump
        File objDump = new File(Path.getObjDumpPath());
        if (!objDump.exists()) {
            System.out.println("\nObjDump download");
            boolean binUtilitiesDownloadResult = fileManager.downloadFile(urlBinUtilitiesWithObjDump, Path.getToolFolderPath() + "\\binUtilities.tar.xz");

            if (binUtilitiesDownloadResult) {
                //Take objdump from tar file
                fileManager.decompress(Path.getToolFolderPath() + "\\binUtilities.tar.xz", Path.getToolFolderPath() + "\\binUtilities");
                fileManager.deleteFile(Path.getToolFolderPath() + "\\binUtilities.tar.xz");
                try {
                    FileUtils.copyFile(new File(Path.getToolFolderPath() + "\\binUtilities\\bin\\objdump.exe"), new File(Path.getToolFolderPath() + "\\objdump.exe"));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                fileManager.deleteFolder(new File(Path.getToolFolderPath() + "\\binUtilities"));
            } else {
                throw new Exception("Download failed!!!");
            }

        }

        //Download tool chain
        File ARMObjDump = new File(Path.getARMObjDumpPath());
        if (!ARMObjDump.exists()) {
            System.out.println("\nTool Chain download");
            boolean toolChainDownloadResult = fileManager.downloadFile(urlToolChain, Path.getToolFolderPath() + "\\gcc-arm-none-eabi-7-2018-q2-update-win32.zip");

            if (toolChainDownloadResult) {
                //Take arm objdump from tar file
                fileManager.decompress(Path.getToolFolderPath() + "\\gcc-arm-none-eabi-7-2018-q2-update-win32.zip", Path.getToolFolderPath() + "ARMToolChain");
                fileManager.deleteFile(Path.getToolFolderPath() + "\\gcc-arm-none-eabi-7-2018-q2-update-win32.zip");
                try {
                    FileUtils.copyFile(new File(Path.getToolFolderPath() + "ARMToolChain\\bin\\arm-none-eabi-objdump.exe"), new File(Path.getToolFolderPath() + "arm-none-eabi-objdump.exe"));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                fileManager.deleteFolder(new File(Path.getToolFolderPath() + "ARMToolChain"));
            } else {
                throw new Exception("Download failed!!!");
            }
        }
    }

    public void disassemblyARMArchitecture (File input, File output) throws IOException, InterruptedException {
        disassembly(Path.getARMObjDumpPath(), input, output);
    }

    public void disassemblyX86Architecture (File input, File output) throws IOException, InterruptedException {
        disassembly(Path.getObjDumpPath(), input, output);
    }

    private void disassembly (String pathTool, File input, File output) throws InterruptedException, IOException {
        Process process = null;
        ProcessBuilder processBuilder = new ProcessBuilder();

        //Decompile .so files
        if (input.getName().endsWith(".so")) {
            processBuilder.command(pathTool, "-d", input.getAbsolutePath());
            processBuilder.directory(new File(input.getParentFile().getAbsolutePath()));
            processBuilder.redirectOutput(output);

            process = processBuilder.start();
            process.waitFor();

            String errorStream = fileManager.getStream(process.getErrorStream());

            //If there is an error, delete the file that has been created
            if (!errorStream.equals("")) {
                File fileToDelete = output;
                fileToDelete.delete();
            }

            process.destroy();
        }
    }
}
