package Deassembler;

import FileManager.FileManager;
import FileManager.Path;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;

public class Deassembler {
    private FileManager fileManager;

    private File armFolder;
    private File x86Folder;

    public Deassembler () {
        this.fileManager = new FileManager();
    }

    public void generateSOFromApk(File apkDecompiledInput) throws IOException, InterruptedException {
        if (!apkDecompiledInput.exists()) {
            throw new FileNotFoundException();
        }

        createApkSoDirectories(apkDecompiledInput.getName().replaceAll("~", ""));

        if (armFolder != null && x86Folder != null) {
            //Search arm and x86 folder, in tmpFolder
            File tmpArmFolder = null;
            File tmpX86Folder = null;
            for (File subFolder : apkDecompiledInput.listFiles()) {
                if (subFolder.getName().equals("lib")) {
                    for (File subLibFolder : subFolder.listFiles()) {
                        if (subLibFolder.getName().contains("arm") && !subLibFolder.getName().contains("64")) {
                            tmpArmFolder = new File(subLibFolder.getAbsolutePath());
                        }

                        else if (subLibFolder.getName().equals("x86")) {
                            tmpX86Folder = new File(subLibFolder.getAbsolutePath());
                        }
                    }
                }
            }


            // DEASSEMBLING SO FILE, FOR ARM AND X(& ARCH.
            Deassembler deassembler = new Deassembler();
            for (File armSoFile : tmpArmFolder.listFiles()) {
                File outputSoFile = null;
                if (System.getProperty("os.name").contains("Windows")) {
                    outputSoFile = new File(armFolder.getAbsolutePath() + "\\" + armSoFile.getName() + "_ARMDecompiled.txt");
                } else {
                    outputSoFile = new File(armFolder.getAbsolutePath() + "/" + armSoFile.getName() + "_ARMDecompiled.txt");
                }

                deassembler.disassemblyARMArchitecture(armSoFile, outputSoFile);
            }

            for (File x86SoFile : tmpX86Folder.listFiles()) {
                File outputSoFile = null;
                if (System.getProperty("os.name").contains("Windows")) {
                    outputSoFile = new File(x86Folder.getAbsolutePath() + "\\" + x86SoFile.getName() + "_X86Decompiled.txt");
                } else {
                    outputSoFile = new File(x86Folder.getAbsolutePath() + "/" + x86SoFile.getName() + "_X86Decompiled.txt");
                }

                deassembler.disassemblyX86Architecture(x86SoFile, outputSoFile);
            }

            fileManager.deleteFolder(apkDecompiledInput);
        }
    }

    public void disassemblyARMArchitecture (File input, File output) throws IOException, InterruptedException {
        disassembly(Path.getARMObjDumpPath(), input, output);
    }

    public void disassemblyX86Architecture (File input, File output) throws IOException, InterruptedException {
        disassembly(Path.getObjDumpPath(), input, output);
    }

    private void disassembly (String pathTool, File input, File output) throws InterruptedException, IOException {
        Process process = null;
        ProcessBuilder processBuilder = new ProcessBuilder();

        //Decompile .so files
        if (input.getName().endsWith(".so")) {
            processBuilder.command(pathTool, "-d", input.getAbsolutePath());
            processBuilder.directory(new File(input.getParentFile().getAbsolutePath()));
            processBuilder.redirectOutput(output);

            process = processBuilder.start();
            process.waitFor();

            String errorStream = fileManager.getStream(process.getErrorStream());

            //If there is an error, delete the file that has been created
            if (!errorStream.equals("")) {
                File fileToDelete = output;
                fileToDelete.delete();
            }

            process.destroy();
        }
    }

    private void createApkSoDirectories (String apkName) {
        File apkSoFolder = this.fileManager.createSubDirectory(Path.getApkSoFolderPath(), apkName);

        this.armFolder = this.fileManager.createSubDirectory(apkSoFolder.getAbsolutePath(), "arm");
        this.x86Folder = this.fileManager.createSubDirectory(apkSoFolder.getAbsolutePath(), "x86");
    }
}
