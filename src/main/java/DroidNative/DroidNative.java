package DroidNative;

import FileManager.FileManager;
import FileManager.Path;
import org.apache.commons.io.FileUtils;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;

public class DroidNative {
    private static final String urlDroidNativeCode = "https://bitbucket.org/shahid_alam/droidnative/get/6fa40c684362.zip";

    private String capstoneMakefile_WIN;
    private String capstoneMakefile;
    private String droidnativeMakefileACFG_WIN;
    private String droidnativeMakefileACFG;
    private String droidnativeMakefileOnlyMAIL_WIN;
    private String droidnativeMakefileOnlyMAIL;
    private String droidnativeMakefileSWOD_WIN;
    private String droidnativeMakefileSWOD;
    private String droidnativeBuild_WIN;
    private String droidnativeBuild;

    private FileManager fileManager;

    public DroidNative () {
        this.fileManager = new FileManager();

        //Partial path
        this.capstoneMakefile_WIN = "DroidNativeResources" + File.separator + "CapstoneMakefiles" + File.separator + "Makefile";
        this.capstoneMakefile = Path.getToolFolderPath() + "DroidNative" + File.separator + "lib" + File.separator + "capstone-3.0" + File.separator + "Makefile";
        this.droidnativeMakefileACFG_WIN = "DroidNativeResources" + File.separator + "DroidNativeMakefiles" + File.separator + "Makefile-ACFG";
        this.droidnativeMakefileACFG = Path.getToolFolderPath() + "DroidNative" + File.separator + "Makefile-ACFG";
        this.droidnativeMakefileOnlyMAIL_WIN = "DroidNativeResources" + File.separator + "DroidNativeMakefiles" + File.separator + "Makefile-Only-MAIL";
        this.droidnativeMakefileOnlyMAIL = Path.getToolFolderPath() + "DroidNative" + File.separator + "Makefile-Only-MAIL";
        this.droidnativeMakefileSWOD_WIN = "DroidNativeResources" + File.separator + "DroidNativeMakefiles" + File.separator + "Makefile-SWOD";
        this.droidnativeMakefileSWOD = Path.getToolFolderPath() + "DroidNative" + File.separator + "Makefile-SWOD";
        this.droidnativeBuild_WIN = "DroidNativeResources" + File.separator + "build.pl";
        this.droidnativeBuild = Path.getToolFolderPath() + "DroidNative" + File.separator + "build.pl";
    }

    public void downloadDroidNativeCode () throws Exception {
        String nameRar = "shahid_alam-droidnative-6fa40c684362";
        //Download DroidNative
        File DroidNativeFolder = new File(Path.getDroidNativeFolderPath());
        if (!DroidNativeFolder.exists()) {
            System.out.println("\nDroidNative download\n");
            boolean DroidNativeDownloadResult = fileManager.downloadFile(urlDroidNativeCode, Path.getToolFolderPath() +
                    File.separator + nameRar + ".zip");

            if (DroidNativeDownloadResult) {
                //Take arm objdump from tar file
                fileManager.decompress(Path.getToolFolderPath() + File.separator + nameRar + ".zip", Path.getToolFolderPath());

                //Folder extracted
                File [] toolFiles = new File(Path.getToolFolderPath()).listFiles(new FileFilter() {
                    @Override
                    public boolean accept(File pathname) {
                        if (pathname.getName().contains(nameRar))
                            return true;
                        return false;
                    }
                });
                File folderExtracted = toolFiles[0];

                FileUtils.copyDirectory(folderExtracted.listFiles()[0], DroidNativeFolder);

                fileManager.deleteFile(Path.getToolFolderPath() + File.separator + nameRar + ".zip");
                fileManager.deleteFolder(folderExtracted);
            } else {
                throw new Exception("Download failed!!!\n");
            }
        }
    }

    public void build () throws IOException, InterruptedException {
        ProcessBuilder processBuilder = new ProcessBuilder();
        processBuilder.inheritIO();

        //Use script and makefile created for windows os
        if (System.getProperty("os.name").contains("Windows")) {
            String nameJar = new java.io.File(DroidNative.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getName();

            //Take script and makefile from jar
            fileManager.decompress(Path.getJarPath() + File.separator + nameJar, Path.getResourcePath() + "~tmp");

            //Final path
            this.capstoneMakefile_WIN = Path.getResourcePath() + "~tmp" + File.separator + this.capstoneMakefile_WIN;
            this.droidnativeMakefileACFG_WIN = Path.getResourcePath() + "~tmp" + File.separator + this.droidnativeMakefileACFG_WIN;
            this.droidnativeMakefileOnlyMAIL_WIN = Path.getResourcePath() + "~tmp" + File.separator + this.droidnativeMakefileOnlyMAIL_WIN;
            this.droidnativeMakefileSWOD_WIN = Path.getResourcePath() + "~tmp" + File.separator + this.droidnativeMakefileSWOD_WIN;
            this.droidnativeBuild_WIN = Path.getResourcePath() + "~tmp" + File.separator + this.droidnativeBuild_WIN;

            //Copy new script and makefile in DroidNative Folder
            FileUtils.copyFile(new File(this.capstoneMakefile_WIN), new File(this.capstoneMakefile));
            FileUtils.copyFile(new File(this.droidnativeMakefileACFG_WIN), new File(this.droidnativeMakefileACFG));
            FileUtils.copyFile(new File(this.droidnativeMakefileOnlyMAIL_WIN), new File(this.droidnativeMakefileOnlyMAIL));
            FileUtils.copyFile(new File(this.droidnativeMakefileSWOD_WIN), new File(this.droidnativeMakefileSWOD));
            FileUtils.copyFile(new File(this.droidnativeBuild_WIN), new File(this.droidnativeBuild));

            //Delete tmp folder
            FileUtils.deleteDirectory(new File(Path.getResourcePath() + "~tmp"));
        }

        //Run build script
        processBuilder.command("perl", "build.pl");
        processBuilder.directory(new File(Path.getDroidNativeFolderPath()));

        Process proc = processBuilder.start();
        proc.waitFor();
        proc.destroy();
    }

    public void folderNormalization () throws IOException {
        File [] DroidNativeSubFolder = new File(Path.getDroidNativeFolderPath()).listFiles();
        File binFolder = null;

        for (File file : DroidNativeSubFolder) {
            if (!file.getName().equals("bin")) {
                if (file.isFile())
                    FileUtils.deleteQuietly(file);
                else {
                    FileUtils.deleteDirectory(file);
                }
            } else {
                binFolder = file;
            }
        }


        for (File binFile : binFolder.listFiles()) {
            FileUtils.copyFile(binFile, new File(Path.getDroidNativeFolderPath() + binFile.getName()));
        }

        FileUtils.deleteDirectory(binFolder);
    }

    public void generateMAIL (File input, File output) throws IOException, InterruptedException {
        Process process = null;
        ProcessBuilder processBuilder = new ProcessBuilder();

        //Decompile .so deassembled file
        if (input.getName().endsWith(".txt")) {
            processBuilder.command(Path.getDroidNativeOnlyMAILPath(), input.getName());
            processBuilder.directory(new File(input.getParentFile().getAbsolutePath()));
            processBuilder.redirectOutput(output);

            process = processBuilder.start();
            process.waitFor();

            String errorStream = fileManager.getStream(process.getErrorStream());

            //If there is an error, delete the file that has been created
            if (!errorStream.equals("")) {
                File fileToDelete = output;
                fileToDelete.delete();
            }

            process.destroy();
        }
    }

    public void runCrossValidationACFG (String benignSamplesPath, String malwareSamplesPath, String outputPath) throws IOException, InterruptedException {
        Process process = null;
        ProcessBuilder processBuilder = new ProcessBuilder();
        Path path = new Path();

        String PERL_CMD = "perl";
        String SCRIPT_PATH = Path.getDroidNativeFolderPath() + "run-cross-validation_ACFG.pl";
        String MAX_THREAD = "1";
        String N = "1";
        String ACFG_PATH = Path.getDroidNativeACFGPath().replaceAll("\\\\", "/");
        String BUILD_ROC = "0";
        String TRESHOLD = "1";

        String [] CMD_ARRAY = {PERL_CMD, SCRIPT_PATH, MAX_THREAD, N, benignSamplesPath, malwareSamplesPath, ACFG_PATH,
                BUILD_ROC, TRESHOLD};

        //Run ACFG Script
        processBuilder.command(CMD_ARRAY);
        processBuilder.directory(new File(outputPath));

        process = processBuilder.start();
        process.waitFor();

        process.destroy();
    }
}
